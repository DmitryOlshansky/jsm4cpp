#!/bin/bash
NAMES="bcbo fcbo inclose2 inclose3"
# parallel names
PNAMES=$(echo $NAMES | sed -r 's/[a-z0-9]+/p-\0/g')
FPNAMES=$(echo $NAMES | sed -r 's/[a-z0-9]+/fp-\0/g')
# TPNAMES="tp-bcbo tp-inclose2"
TPNAMES=$(echo $NAMES | sed -r 's/[a-z0-9]+/tp-\0/g')
# 
ALL="cbo $NAMES $PNAMES $FPNAMES $TPNAMES"
SERIAL="cbo $NAMES"
PARALLEL="$PNAMES $FPNAMES $TPNAMES"
EXTENTS="bitset linear tree" # TODO: hashset
INTENTS="bitset linear" # might not be the same as extents
WRITERS=(table simple)
ALLOCS=(malloc shared-pool tls-pool)

REALDATA="mushroom adult"
# gen-extent-intent-writer-alloc
#      $1      $2     $3    $4
binary_suffix(){
	echo "${1:0:3}-${2:0:3}-${3:0:3}-${4:0:1}"
}

# gen-extent-intent-writer-alloc  algos  flags target-files ...
#      $1      $2     $3    $4      $5     $6     $7
# Output: time(s),mem(kb), {x algos} \n
run_to_csv(){
	local bin=gen-$(binary_suffix $1 $2 $3 $4)
	local ALGOS="$5"
	local flags="$6"
	shift 6
	for algo in $ALGOS ; do
		# echo /usr/bin/time -f "%M" ./$bin -a$algo $flags $@  >&2
		OUTPUT=$(/usr/bin/time -f "%M" nice -n -20 ./$bin -a$algo $flags $@  2>&1  > out.dat)
		if echo "$OUTPUT" | grep -q Time ; then
			FILTERED=$(echo "$OUTPUT" | sed 's/Time//g'| sed 's/://g' | tr -t '\n\r' '  ')
			ELAPSED=$(echo "$FILTERED" | sed -r 's/\s*([0-9a-z.]+)\s*([0-9a-z]+)\s*/\1/')
			KB=$(echo "$FILTERED" | sed -r 's/\s*([0-9a-z.]+)\s*([0-9a-z]+)\s*/\2/')
			echo -n "$ELAPSED,$KB,"
		else
			echo -n "0,0,"
			echo "Failed with ./$bin -a$algo">&2
		fi
	done
	echo
}

# $1 - fork flag $2+ cmd line
run_with_scale(){
	local flag=$1
	shift 1
	if [ "$flag" == "yes" ] ; then
		$@ &
	else
		$@
	fi
}

# generate a bunch of random datasets using format of dir/objects-attrs-density-<id>.dat
# <# of samples> <objects> <attrs> <density - float> <dir>
make_random_datasets(){
	local samples="$1"
	local objects="$2"
	local attrs="$3"
	local density="$4"
	local prefix="$5"
	mkdir -p $prefix
	local i=0
	while [ $i -lt $samples ] ; do
		./datagen $objects $attrs $density > "$prefix/$objects-$attrs-$density-$i.dat"
		let i=$i+1
	done
}

# get a list of datasets for <objects> <attrs> <density in %> [<prefix>] if were generated
pick_datasets(){
	local prefix="$4"
	echo $prefix/$1-$2-$3-*.dat
}

# file name of generated dataset --> number of sample
dataset_sample_number(){
	echo -n $dat | sed -r 's/.*\/[0-9]*-[0-9]*-[0-9.]*-(.*).dat/\1/'
}

# a file name part of objects-attrs-density
dataset_name(){
	printf "%s-%s-%s" $1 $2 $3
}

# functional style for each applied to a random data sets
# cmd assumed to accept arguments: <input-file> <output-file> <extra-args>
# <objects> <attrs> <density> <dir> <cmd> <extra cmd args>
apply_to_datasets(){
	local tripple="$1 $2 $3"
	local name="$1-$2-$3"
	local dir=$4
	shift 4
	local pattern="$1"
	local cmd="$2"
	shift 2
	for dat in $(pick_datasets $tripple $dir) ; do
		N=$(dataset_sample_number $dat)
		local target=$(printf $pattern $N)
		DIR=`echo -n $target | sed -r 's|(.*)/.*|\1|'`
		mkdir -p $DIR # make dir tree to target
		"$cmd" $dat $target $@
	done
}


# iterate 3-D range of (extent-type x intent-type x sample count)
# $1 - cmd, $2 - if present, scale by forking
# runs command as "$cmd" "$extent" "$intent" "$sample"
for_intents_extents_samples(){
	local cmd="$1"
	if [ "x$2" != "x" ] ; then
		local scale="yes"
		echo >&2 "*** Fork scale is on - this needs LOTs of cores to get proper results" 
	else
		local scale="no"
	fi
	echo  >&2 "Scaling test runs by forking : $scale."
	shift 1
	for intent in $INTENTS ; do
		echo "bitset" "$intent" >&2
		for n in `seq 0 ${SAMPLES_LAST}` ; do
			run_with_scale "$scale" "$cmd" "bitset" $intent $n 
		done
	done
	wait
	for extent in $EXTENTS ; do
		if [ "$extent" != "bitset" ] ; then # already checked bitset bitset
			echo "$extent" "bitset" >&2
			for n in `seq 0 ${SAMPLES_LAST}` ; do
				run_with_scale "$scale" "$cmd" $extent "bitset" $n 
			done
		fi
	done
	wait
}


# produce CSV series as rows of runs of command cmd with varying parameter
#
# <output-file> <header> <value-range as single-string> <cmd> <extra args>
# cmd is executed as: $cmd <value-from-range> <extra-args> to produce a line of csv
produce_csv_series(){
	local output="$1"
	local hdr="$2"
	local range="$3"
	local cmd="$4"
	shift 4
	(
		echo "$hdr"
		for param in $range ; do # unpacks param string
			echo -n "$param,"
			"$cmd" "$param" $@
		done
	)  > "$output"
}