#!/bin/bash
NAMES="bcbo fcbo inclose2 inclose3"
# parallel names
PNAMES=$(echo $NAMES | sed -r 's/[a-z0-9]+/p-\0/g')
FPNAMES=$(echo $NAMES | sed -r 's/[a-z0-9]+/fp-\0/g')
TPNAMES="tp-bcbo tp-fcbo"
#TPNAMES=$(echo $NAMES | sed -r 's/[a-z0-9]+/tp-\0/g')
# 
ALL="cbo $NAMES $PNAMES $FPNAMES $TPNAMES"
SERIAL="cbo $NAMES"
PARALLEL="$PNAMES $FPNAMES $TPNAMES"
EXTENTS="bitset linear tree" # TODO: hashset
INTENTS="bitset linear tree" # might not be the same as extents
WRITERS=(table simple)
ALLOCS=(malloc shared-pool tls-pool)

# gen-extent-intent-writer-alloc
#      $1      $2     $3    $4
binary_suffix(){
	echo "${1:0:3}-${2:0:3}-${3:0:3}-${4:0:1}"
}

# gen-extent-intent-writer-alloc  algos  flags target-files ...
#      $1      $2     $3    $4      $5     $6     $7
# Output: time(s),mem(kb), {x algos} \n
run_to_csv(){
	local bin=gen-$(binary_suffix $1 $2 $3 $4)
	local ALGOS="$5"
	local flags="$6"
	shift 6
	for algo in $ALGOS ; do
		# echo "$algo" >&2 # debug hook
		# echo /usr/bin/time -f "%M" ./$bin -a$algo $flags $@  >&2
		OUTPUT=$(/usr/bin/time -f "%M" ./$bin -a$algo $flags $@  2>&1  > out.dat | sed 's/Time//'| sed 's/://g' | tr -t '\n\r' '  ')
		ELAPSED=$(echo "$OUTPUT" | sed -r 's/\s*([0-9a-z.]+)\s*([0-9a-z]+)\s*/\1/')
		KB=$(echo "$OUTPUT" | sed -r 's/\s*([0-9a-z.]+)\s*([0-9a-z]+)\s*/\2/')
		echo -n "$ELAPSED,$KB,"
	done
	echo
}


# generate a bunch of random datasets using format of dir/objects-attrs-density-<id>.dat
# <# of samples> <objects> <attrs> <density - float> <dir>
make_random_datasets(){
	local samples="$1"
	local objects="$2"
	local attrs="$3"
	local density="$4"
	local prefix="$5"
	mkdir -p $prefix
	local i=0
	while [ $i -lt $samples ] ; do
		./datagen $objects $attrs $density > "$prefix/$objects-$attrs-$density-$i.dat"
		let i=$i+1
	done
}

# get a list of datasets for <objects> <attrs> <density in %> [<prefix>] if were generated
pick_datasets(){
	local prefix="$4"
	echo $prefix/$1-$2-$3-*.dat
}

# file name of generated dataset --> number of sample
dataset_sample_number(){
	echo -n $dat | sed -r 's/.*\/[0-9]*-[0-9]*-[0-9.]*-(.*).dat/\1/'
}

# a file name part of objects-attrs-density
dataset_name(){
	printf "%s-%s-%s" $1 $2 $3
}

# functional style for each applied to a random data sets
# cmd assumed to accept arguments: <input-file> <output-file> <extra-args>
# <objects> <attrs> <density> <dir> <cmd> <extra cmd args>
apply_to_datasets(){
	local tripple="$1 $2 $3"
	local name="$1-$2-$3"
	local dir=$4
	shift 4
	local pattern="$1"
	local cmd="$2"
	shift 2
	for dat in $(pick_datasets $tripple $dir) ; do
		N=$(dataset_sample_number $dat)
		local target=$(printf $pattern $N)
		DIR=`echo -n $target | sed -r 's|(.*)/.*|\1|'`
		mkdir -p $DIR # make dir tree to target
		"$cmd" $dat $target $@
	done
}

# produce CSV series as rows of runs of command cmd with varying parameter
#
# <output-file> <header> <value-range as single-string> <cmd> <extra args>
# cmd is executed as: $cmd <value-from-range> <extra-args> to produce a line of csv
produce_csv_series(){
	local output="$1"
	local hdr="$2"
	local range="$3"
	local cmd="$4"
	shift 4
	(
		echo "$hdr"
		for param in $range ; do # unpacks param string
			echo -n "$param,"
			"$cmd" "$param" $@
		done
	)  > "$output"
}